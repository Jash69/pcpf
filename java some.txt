java code 
1 
import java.util.*;

class Main {
    public static void main(String[] args) {
        int choice, i, j, k;
        Scanner sc = new Scanner(System.in);
        System.out.println("enter the choice \n 1.factorial 2.testarmstrong 3.testpalindrome 4.testprime 5.fibonacciseries");
        choice = sc.nextInt();
        switch (choice) {
            case 1:
                int num, fact = 1;
                System.out.println("enter a number");
                num = Integer.parseInt(sc.nextLine());
                for (i = 1; i <= num; i++) {
                    fact = fact * i;
                }
                System.out.println("the factorial of given no. is " + fact);
                break;
            case 2:
                int ans = 0, remainder, temp;
                System.out.println("enter a number");
                num = Integer.parseInt(sc.nextLine());
                temp = num;
                while (num != 0) +{
                    remainder = num % 10;
                    ans = ans + (remainder * remainder * remainder);
                    num = num / 10;
                }
                if (temp == ans) {
                    System.out.println(temp + " is an armstrongno");
                } else {
                    System.out.println(temp + " is not an Armstrong Number");
                }
                break;
            case 3:
                int rev = 0;
                System.out.println("Enter a number:");
                num = sc.nextInt();
                temp = num;
                while (num != 0) {
                    rev = (rev * 10) + (num % 10);
                    num = num / 10;
                }
                if (temp == rev) {
                    System.out.println(temp + " is a Palindrome Number");
                } else {
                    System.out.println(temp + " is not a Palindrome Number");
                }
                break;
            case 4:
                System.out.println("Enter a number:");
                num = sc.nextInt();
                for (i = 2; i < num; i++) {
                    if (num % i == 0) {
                        break;
                    }
                }
                if (i == num) {
                    System.out.println(num + " is a Prime Number");
                } else {
                    System.out.println(num + " is not a Prime Number");
                }
                break;
            case 5:
                int m = 0, n = 1;
                System.out.println("Enter a number:");
                num = sc.nextInt();
                System.out.print("The Fibonacci Series up to " + num + " elements is:\n");
                System.out.print(m + "\t" + n);
                for (i = 3; i <= num; i++) {
                    k = m + n;
                    System.out.print("\t" + k);
                    m = n;
                    n = k;
                }
                break;
            default:
                System.out.println("Enter Valid Choice");
                break;
        }
    }
}

->_>_>_>_>_>_>_>__________________________________________________________________________________________>_>_>_>_>_>_>_>_________________________________________________________>_>_>_>_>_

2

import java.util.*;

public class Rectangle {
    double l, b;

    void setDim(double ll, double bb) {
        l = ll;
        b = bb;
    }

    double getArea() {
        return l * b;
    }

    public static void main(String args[]) {
        Scanner Sc = new Scanner(System.in);
        double l, b;
        System.out.print("Enter Length : ");
        l = Sc.nextDouble();
        System.out.print("Enter Breadth : ");
        b = Sc.nextDouble();
        Rectangle rect = new Rectangle();
        rect.setDim(l, b);
        System.out.print("Area of Rectangle : " + rect.getArea());
    }
}


->_>_>_>_>_>_>_>__________________________________________________________________________________________>_>_>_>_>_>_>_>_________________________________________________________>_>_>_>_>_



3
single inheritence
class Shape {
    protected double area;
    protected double volume;
    protected double surfaceArea;

    public void displayArea() {
        System.out.println("Area: " + area);
    }

    public void displayVolume() {
        System.out.println("Volume: " + volume);
    }

    public void displaySurfaceArea() {
        System.out.println("Surface Area: " + surfaceArea);
    }
}

class Square extends Shape {
    protected double side;

    public Square(double side) {
        this.side = side;
        this.area = calculateArea();
    }

    private double calculateArea() {
        return side * side;
    }
}

class Cube extends Square {
    public Cube(double side) {
        super(side);
        this.volume = calculateVolume();
        this.surfaceArea = calculateSurfaceArea();
    }

    private double calculateVolume() {
        return super.area * side;
    }

    private double calculateSurfaceArea() {
        return 6 * super.area;
    }
}

class Circle extends Shape {
    protected double radius;

    public Circle(double radius) {
        this.radius = radius;
        this.area = calculateArea();
    }

    private double calculateArea() {
        return Math.PI * radius * radius;
    }
}

class Cylinder extends Circle {
    private double height;

    public Cylinder(double radius, double height) {
        super(radius);
        this.height = height;
        this.volume = calculateVolume();
        this.surfaceArea = calculateSurfaceArea();
    }

    private double calculateVolume() {
        return super.area * height;
    }

    private double calculateSurfaceArea() {
        return 2 * Math.PI * super.radius * (super.radius + height);
    }
}

// Add other shapes and their calculations similarly

public class Main {
    public static void main(String[] args) {
        // Example usage
        Square square = new Square(5);
        square.displayArea();

        Cube cube = new Cube(4);
        cube.displayVolume();
        cube.displaySurfaceArea();

        Circle circle = new Circle(3);
        circle.displayArea();

        Cylinder cylinder = new Cylinder(2, 4);
        cylinder.displayVolume();
        cylinder.displaySurfaceArea();

        // Create instances of other shapes and perform calculations
    }
}






//


class Complex {
    double real;
    double imag;

    public Complex(double real, double imag) {
        this.real = real;
        this.imag = imag;
    }

    public Complex add(Complex other) {
        return new Complex(this.real + other.real, this.imag + other.imag);
    }

    public Complex subtract(Complex other) {
        return new Complex(this.real - other.real, this.imag - other.imag);
    }

    public String toString() {
        return real + " + " + imag + "i";
    }

    public static void main(String[] args) {
        Complex c1 = new Complex(3, 2);
        Complex c2 = new Complex(1, 4);

        // Add two complex numbers
        Complex sum = c1.add(c2);
        System.out.println("Sum: " + sum);

        // Subtract two complex numbers
        Complex diff = c1.subtract(c2);
        System.out.println("Difference: " + diff);
    }
}




pcpf lab

1

java matrix
import java.util.*;


public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the number of rows for matrix 1:");
        int rows1 = scanner.nextInt();
        System.out.println("Enter the number of columns for matrix 1:");
        int columns1 = scanner.nextInt();

        System.out.println("Enter the number of rows for matrix 2:");
        int rows2 = scanner.nextInt();
        System.out.println("Enter the number of columns for matrix 2:");
        int columns2 = scanner.nextInt();

        int[][] matrix1 = new int[rows1][columns1];
        int[][] matrix2 = new int[rows2][columns2];

        // Input for matrix 1
        System.out.println("Enter elements for matrix 1:");
        for (int i = 0; i < rows1; i++) {
            for (int j = 0; j < columns1; j++) {
                matrix1[i][j] = scanner.nextInt();
            }
        }

        // Input for matrix 2
        System.out.println("Enter elements for matrix 2:");
        for (int i = 0; i < rows2; i++) {
            for (int j = 0; j < columns2; j++) {
                matrix2[i][j] = scanner.nextInt();
            }
        }

        // Matrix addition
        if (rows1 == rows2 && columns1 == columns2) {
            System.out.println("Matrix addition result:");
            for (int i = 0; i < rows1; i++) {
                for (int j = 0; j < columns1; j++) {
                    System.out.print((matrix1[i][j] + matrix2[i][j]) + " ");
                }
                System.out.println();
            }
        } else {
            System.out.println("Matrix addition is not possible. Make sure the dimensions are the same.");
        }

        // Matrix subtraction
        if (rows1 == rows2 && columns1 == columns2) {
            System.out.println("Matrix subtraction result:");
            for (int i = 0; i < rows1; i++) {
                for (int j = 0; j < columns1; j++) {
                    System.out.print((matrix1[i][j] - matrix2[i][j]) + " ");
                }
                System.out.println();
            }
        } else {
            System.out.println("Matrix subtraction is not possible. Make sure the dimensions are the same.");
        }

        // Matrix multiplication
        if (columns1 == rows2) {
            System.out.println("Matrix multiplication result:");
            int[][] resultMatrix = new int[rows1][columns2];
            for (int i = 0; i < rows1; i++) {
                for (int j = 0; j < columns2; j++) {
                    for (int k = 0; k < columns1; k++) {
                        resultMatrix[i][j] += matrix1[i][k] * matrix2[k][j];
                    }
                    System.out.print(resultMatrix[i][j] + " ");
                }
                System.out.println();
            }
        } else {
            System.out.println("Matrix multiplication is not possible. Make sure the number of columns in the first matrix is equal to the number of rows in the second matrix.");
        }
        
        
        
        // Find the sum of all elements of matrix 1
int sumMatrix1 = 0;
for (int i = 0; i < rows1; i++) {
  for (int j = 0; j < columns1; j++) {
    sumMatrix1 += matrix1[i][j];
  }
}

// Find the sum of all elements of matrix 2
int sumMatrix2 = 0;
for (int i = 0; i < rows2; i++) {
  for (int j = 0; j < columns2; j++) {
    sumMatrix2 += matrix2[i][j];
  }
}

// Print the sum of all elements of each matrix
System.out.println("Sum of all elements of matrix 1: " + sumMatrix1);
System.out.println("Sum of all elements of matrix 2: " + sumMatrix2);
        scanner.close();
    }
}



2


#include <iostream>
using namespace std;

class Adder {
public:
    Adder() {
        Total = 0;
    } // constructor

    void Add(int price) {
        Total += price;
    }

    int getTotalEarning() {
        return Total;
    }

private:
    int Total;
};

int main() {
    Adder bakery;
    bakery.Add(50); // Price for the first type of cake
    bakery.Add(70); // Price for the second type of cake
    bakery.Add(100); // Price for the third type of cake

    cout << "Total Earnings: $" << bakery.getTotalEarning() << endl;

    return 0;
}

