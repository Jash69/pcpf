1.Square the even elements of an list
mySqr :: [Int] -> [Int]
mySqr [] = []
mySqr (x:xs) =
    if (mod x 2) == 0
    then x * x : mySqr xs
    else x : mySqr xs

main :: IO ()
main = do
    let result = mySqr [4, 9, 36]
    print result
	
2.PercentageLoss
percentageLoss :: Float -> Float -> Float
percentageLoss cp sp = if cp>sp
then (cp-sp) * 100 / cp
else -1

main = do
putStrLn "Enter Cost Price:"
ain <- getLine
let a = (read ain :: Float)
putStrLn "Enter Sell Price:"
bin <- getLine
let b = (read bin :: Float)

let loss = percentageLoss a b
putStr "Loss in Percentage:"
print(loss)

3. Square all Positive elements of a List
mySquare :: [Int] -> [Int]
mySquare [] = []
mySquare (x:xs) = if x>=0
then x*x : mySquare xs
else mySquare xs

main = do
let result = mySquare [-1,3,4,-10,0]
print(result)

4.Simple Interest

simpleInterest :: Float -> Float -> Float -> Float
simpleInterest total principal time = ((total - principal) / (principal * time) )* 100 

main :: IO ()
main = do
    putStrLn "Enter Principal Amount:"
    ain <- getLine
    let principal = read ain :: Float

    putStrLn "Enter Total Amount:"
    bin <- getLine
    let total = read bin :: Float

    putStrLn "Enter Time:"
    cin <- getLine
    let time = read cin :: Float

    let simple = simpleInterest total principal time
    putStrLn ("Simple Interest: " ++ show simple ++ "%")
	
5.Lenght of list,Member


myLenght :: [a] -> Int
myLenght [] = 0
myLenght (x:xs) = 1 + myLenght xs

myMember :: (Eq a) => [a] -> a -> Bool
myMember [] _ = False
myMember (x:xs) e = if e == x
then True
else myMember xs e

main=do
let result = myLenght [2,3,48979,398098,38998]
let result1 = myMember ["Om","Pawaskar"] "Om"
print result1


6.fibonaci, factorial


myfactorial :: Int -> Int
myfactorial 0 = 1
myfactorial x = if(x>0)
then x * myfactorial (x-1)
else -1

myfibonaci :: Int -> Int
myfibonaci 1 = 0
myfibonaci 2 = 1
myfibonaci x = if(x>0)
then myfibonaci (x-1) + myfibonaci (x-2)
else -1

myfibonacciSeries :: Int -> [Int]
myfibonacciSeries 1 = [0]
myfibonacciSeries 2 = [0, 1]
myfibonacciSeries x = if(x>0)
then myfibonacciSeries (x - 1) ++ [last (myfibonacciSeries (x - 1)) + last (myfibonacciSeries (x - 2))]
else [-1]

main=do
let result = myfactorial 5
if(result == -1)
then putStrLn "Enter Valid No."
else print result

let fibo = myfibonaci 5
if(fibo == -1)
then putStrLn "Enter Valid No."
else print fibo

let fiboseries = myfibonacciSeries 10
if(fiboseries == [-1])
then putStrLn "Enter Valid No."
else print fiboseries



-- Increment each element in a list
incrementList :: [Int] -> [Int]
incrementList xs = map (+1) xs

-- Filter even numbers from a list
filterEven :: [Int] -> [Int]
filterEven xs = filter even xs

-- Square function
square :: [Int] -> [Int]
square [] = []
square (x:xs) = x * x : square xs

-- Cube function
cube :: [Int] -> [Int]
cube [] = []
cube (x:xs) = x * x * x : cube xs

-- Square Root function
squareRoot :: [Double] -> [Double]
squareRoot [] = []
squareRoot (x:xs) = sqrt x : squareRoot xs

-- Sum of Even Numbers function
sumEven :: [Int] -> Int
sumEven [] = 0
sumEven (x:xs)
  | even x = x + sumEven xs
  | otherwise = sumEven xs

-- Sum of Odd Numbers function
sumOdd :: [Int] -> Int
sumOdd [] = 0
sumOdd (x:xs)
  | odd x = x + sumOdd xs
  | otherwise = sumOdd xs

-- Product of Even Numbers function
productEven :: [Int] -> Int
productEven [] = 1
productEven (x:xs)
  | even x = x * productEven xs
  | otherwise = productEven xs

-- Product of Odd Numbers function
productOdd :: [Int] -> Int
productOdd = foldl (*) 1 . filter odd

-- Check if Even function
isEven :: Int -> Bool
isEven n = even n

-- Check if Odd function
isOdd :: Int -> Bool
isOdd n = odd n

-- Selling price function
sellingPrice :: Double -> Double -> Double
sellingPrice cost profit = cost + profit

-- Cost price function
costPrice :: Double -> Double -> Double
costPrice sellingPrice profit = sellingPrice - profit

-- Percentage profit function
percentProfit :: Double -> Double -> Double
percentProfit cost sellingPrice = ((sellingPrice - cost) / cost) * 100

-- Percentage loss function
percentageLoss :: Double -> Double -> Double
percentageLoss cost sellingPrice = ((cost - sellingPrice) / cost) * 100

-- Nth Permutation function
npr :: Int -> Int -> Int
npr _ 0 = 1
npr n r = npr (n - 1) (r - 1) * n

-- Factorial function
factorial :: Int -> Int
factorial 0 = 1
factorial n = product [1..n]

-- Nth Combination function
ncr :: Int -> Int -> Int
ncr n r = factorial n `div` (factorial r * factorial (n - r))

-- Area of Triangle function
areaOfTriangle :: Double -> Double -> Double -> Double
areaOfTriangle a b c =
  let s = (a + b + c) / 2
  in sqrt (s * (s - a) * (s - b) * (s - c))

-- Sum of Positive Numbers function
sumOfPositive :: [Int] -> Int
sumOfPositive = sum . filter (> 0)

-- Sum of a List
sumList :: [Int] -> Int
sumList = sum

-- Subtraction of List Elements
subtractList :: [Int] -> Int
subtractList = foldl (-) 0

-- Multiplication of List Elements
multiplyList :: [Int] -> Int
multiplyList = foldl (*) 1

-- Division of List Elements
divideList :: [Double] -> Double
divideList [] = 0
divideList (x:xs) = foldl (/) x xs

-- Product of Negative Numbers function
multiplyNegative :: [Int] -> Int
multiplyNegative = foldl (*) 1 . filter (< 0)

-- Length of a List
length1 :: [a] -> Int
length1 [] = 0
length1 (_:xs) = 1 + length1 xs

-- Append Lists
append :: [a] -> [a] -> [a]
append = (++)

-- Check for Sublist
sublist :: Eq a => [a] -> [a] -> Bool
sublist [] _ = True
sublist _ [] = False
sublist (x:xs) (y:ys) = (x == y && sublist xs ys) || sublist (x:xs) ys

-- Access Element at Specific Index
nth0 :: Int -> [a] -> a
nth0 n xs = xs !! n

-- Addition
add :: Int -> Int -> Int
add x y = x + y

-- Multiply each element of the list by a factor X
multiplyListByFactor :: [Int] -> Int -> [Int]
multiplyListByFactor [] _ = []
multiplyListByFactor (x:xs) factor = x * factor : multiplyListByFactor xs factor

-- Add a number X to each element of the list
addToEachElement :: [Int] -> Int -> [Int]
addToEachElement [] _ = []
addToEachElement (x:xs) val = x + val : addToEachElement xs val


main :: IO ()
main = do
  -- Call the functions with sample inputs and print the results
  let myList = [1, 2, 3, 4, 5]
  let result1 = incrementList myList
  let result2 = filterEven myList
  let result3 = square myList
  let result4 = cube myList
  let result5 = squareRoot [1.0, 4.0, 9.0]
  let result6 = sumEven myList
  let result7 = sumOdd myList
  let result8 = productEven myList
  let result9 = productOdd myList
  let num = 4
  let result10 = isEven num
  let result11 = isOdd num
  

  let cost = 100.0
  let profit = 20.0

  let sp = sellingPrice cost profit
  let cp = costPrice sp profit
  let profitPercent = percentProfit cost sp
  let lossPercent = percentageLoss cost sp

  let n = 5
  let r = 3
  let permutation = npr n r
  let combination = ncr n r

  let a = 3.0
  let b = 4.0
  let c = 5.0
  let area = areaOfTriangle a b c

  let myList = [1, 2, 3, 4, -5, 6, -7, 8]
  let sumPos = sumOfPositive myList
  let sumL = sumList myList
  let subL = subtractList myList
  let mulL = multiplyList myList
  let divL = divideList [1.0, 2.0, 3.0]
  let mulNeg = multiplyNegative myList

  let len = length1 myList
  let appendedList = append myList [9, 10, 11]
  let isSublist = sublist [2, 3, 4] myList
  let element = nth0 2 myList
  let added = add 5 7
  let multipliedList = multiplyListByFactor myList 3
  let addedList = addToEachElement myList 5

  -- Print the results
  putStrLn $ "Selling Price: " ++ show sp
  putStrLn $ "Cost Price: " ++ show cp
  putStrLn $ "Profit Percentage: " ++ show profitPercent ++ "%"
  putStrLn $ "Loss Percentage: " ++ show lossPercent ++ "%"
  putStrLn $ "Permutation: " ++ show permutation
  putStrLn $ "Combination: " ++ show combination
  putStrLn $ "Area of Triangle: " ++ show area
  putStrLn $ "Sum of Positive Numbers: " ++ show sumPos
  putStrLn $ "Sum of List: " ++ show sumL
  putStrLn $ "Subtraction of List Elements: " ++ show subL
  putStrLn $ "Multiplication of List Elements: " ++ show mulL
  putStrLn $ "Division of List Elements: " ++ show divL
  putStrLn $ "Product of Negative Numbers: " ++ show mulNeg
  putStrLn $ "Length of List: " ++ show len
  putStrLn $ "Appended List: " ++ show appendedList
  putStrLn $ "Is Sublist: " ++ show isSublist
  putStrLn $ "Element at Specific Index: " ++ show element
  putStrLn $ "Addition: " ++ show added
  putStrLn $ "Multiply List by Factor: " ++ show multipliedList
  putStrLn $ "Add to Each Element: " ++ show addedList


  -- Print the results
  putStrLn "Increment List Result:"
  print result1

  putStrLn "Filter Even Result:"
  print result2

  putStrLn "Square Result:"
  print result3

  putStrLn "Cube Result:"
  print result4

  putStrLn "Square Root Result:"
  print result5

  putStrLn "Sum of Even Numbers Result:"
  print result6

  putStrLn "Sum of Odd Numbers Result:"
  print result7

  putStrLn "Product of Even Numbers Result:"
  print result8

  putStrLn "Product of Odd Numbers Result:"
  print result9

  putStrLn "Is Even Result:"
  print result10

  putStrLn "Is Odd Result:"
  print result11





